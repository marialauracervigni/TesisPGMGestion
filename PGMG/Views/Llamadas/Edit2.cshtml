@model PGMG.Models.Llamada
@using Microsoft.AspNet.Identity
@using App.Extensions

@{
    ViewBag.Title = "Cargar llamada";
}

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    var NomUsuario = User.Identity.GetNombreCompleto();
    var IdUsuario = User.Identity.GetUserId();

    <body class="w3">
        <div class="centrar">
            <h4>@ViewBag.Title</h4>
            <hr />

            @Html.ValidationSummary(true, "", new { @class = "text-danger" })
            @Html.HiddenFor(model => model.LlamadaId)
            @Html.HiddenFor(model => model.LlamadaSolicitadaId)

            <div class="panel-group" id="accordion">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h4 class="panel-title">
                            <a data-toggle="collapse" data-parent="#accordion" href="#collapse1">Llamada en curso</a>
                        </h4>
                    </div>
                    <div id="collapse1" class="panel-collapse">
                        <div class="panel-body">

                            <div class="form-group">
                                @Html.LabelFor(model => model.Fecha, htmlAttributes: new { @class = "control-label" })
                                <br />
                                @Html.TextBoxFor(model => model.Fecha, "{0:dd/MM/yyyy}",
                                new { @class = "login datepicker" })
                                <br />
                                @Html.ValidationMessageFor(model => model.Fecha, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Hora, htmlAttributes: new { @class = "control-label" })
                                <br />
                                @Html.TextBoxFor(model => model.Hora, "{0:HH:mm}",
                               new { @class = "login", onblur = "valida(this.value);" })
                                <br />
                                @Html.ValidationMessageFor(model => model.Hora, "", new { @class = "text-danger" })
                            </div>


                            <div class="form-group">
                                @Html.LabelFor(model => model.TiempoEnLlamado, htmlAttributes: new { @class = "control-label" })
                                <br />
                                <div class="cronometro">
                                    @Html.EditorFor(model => model.TiempoEnLlamado, new { htmlAttributes =
                                   new { @class = "login", id = "TiempoEnLlamado" } })
                                    <br />
                                    @Html.ValidationMessageFor(model => model.TiempoEnLlamado, "", new { @class = "text-danger" })
                                </div>
                            </div>

                            <div class="form-group">
                                <button type="button" class="btn btn-success btn-xs" id="iniciarS">
                                    <span class="glyphicon glyphicon-play" aria-hidden="true"></span>
                                </button>

                                <button type="button" class="btn btn-danger btn-xs" id="resetear">
                                    <span class="glyphicon glyphicon-refresh" aria-hidden="true"></span>
                                </button>

                                <button type="button" class="btn btn-info btn-xs" id="grabar">
                                    <span class="glyphicon glyphicon-stop" aria-hidden="true"></span>
                                </button>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.FormaDeComunicacion, htmlAttributes: new { @class = "control-label" })
                                <br />
                                @Html.DropDownListFor(model => model.FormaDeComunicacionId, ViewData["formadecomun"] as SelectList,
                                new { @class = "login" })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Usuario, htmlAttributes: new { @class = "control-label" })
                                <br />
                                @Html.DropDownListFor(model => model.Usuario, ViewData["usuarioactual"] as SelectList,
                                new { @class = "login" })
                            </div>

                            @Html.HiddenFor(model => model.ClienteId, new { id = Model.ClienteId })
                            <div class="form-group">
                                @Html.LabelFor(model => model.NombreCliente, htmlAttributes: new { @class = "control-label" })
                                <br />
                                <input type="text" id="nombre" @Html.EditorFor(model => model.NombreCliente, new { htmlAttributes = new { @class = "login" } })
                                <br />
                                @Html.ValidationMessageFor(model => model.NombreCliente, "", new { @class = "text-danger" })
                            </div>
                            <div class="form-group">
                                @Html.ActionLink("Ver llamadas", "ReporteLlamadas", new { id = Model.ClienteId }, new { target = "_blank" })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.NombreEmpleado, htmlAttributes: new { @class = "control-label" })
                                <br />
                                @Html.EditorFor(model => model.NombreEmpleado, new { htmlAttributes = new { @class = "login" } })
                                <br />
                                @Html.ValidationMessageFor(model => model.NombreEmpleado, "", new { @class = "text-danger" })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Tema, htmlAttributes: new { @class = "control-label" })
                                <br />
                                @Html.EditorFor(model => model.Tema, new { htmlAttributes = new { @class = "loginmax" } })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Descripcion, htmlAttributes: new { @class = "control-label" })
                                <br />
                                @Html.EditorFor(model => model.Descripcion, new { htmlAttributes = new { @class = "loginmax" } })
                            </div>

                            @Html.HiddenFor(model => model.Activo)
                            @Html.HiddenFor(model => model.TiempoPostLlamado)
                            <br />
                            <div class="form-group">
                                @Html.LabelFor(model => model.Codigo, htmlAttributes: new { @class = "control-label" })
                                <div class="flex">
                                    @foreach (var item in (SelectList)ViewBag.codTarea)
                                    {
                                        <div>
                                            <input type="checkbox" name="CodigoTareaId" value="@item.Value" />
                                            @Html.Label(item.Text, new { @class = "control-label" })
                                        </div>
                                    }

                                </div>
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Estado, htmlAttributes: new { @class = "control-label" })
                                <br />
                                @Html.DropDownListFor(model => model.EstadoId, ViewData["estado"] as SelectList,
                                new { @class = "login"  })
                            </div>

                            <div class="form-group">
                                @Html.LabelFor(model => model.Etiqueta, htmlAttributes: new { @class = "control-label" })
                                <br />
                                @Html.DropDownListFor(model => model.EtiquetaId, ViewData["Etiqueta"] as SelectList,
                                new { @class = "login"  })
                            </div>
                            <br />
                            <div class="form-group">
                                <input type="submit" value="Guardar llamada" class="btn btn-default" />
                                <input type="submit" value="Guardar y crear tarea pendiente" class="btn btn-default" />
                            </div>

                        </div>
                    </div>
                </div>
            </div>
            <div class="panel-group" id="accordion">
                <div class="panel panel-default">
                    <div class="panel-heading">
                        <h4 class="panel-title">
                            <a data-toggle="collapse" data-parent="#accordion" href="#collapse2">Últimas llamadas</a>
                        </h4>
                    </div>
                    <div id="collapse2" class="panel-collapse">
                        <div class="panel-body">
                            <form class="form-inline"></form>
                            @Html.Action("UltimasLlamadas", new { id = Model.ClienteId })
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </body>
}


@section scripts{
    <script type="text/javascript" src="~/Scripts/jquery.maskedinput.js"></script>
    <script src="~/Scripts/ValidarAlCerrar.js"></script>
    <script>

        jQuery(function ($) {
            $.mask.definitions['H'] = '[012]';
            $.mask.definitions['N'] = '[012345]';
            $.mask.definitions['n'] = '[0123456789]';
            $.mask.definitions['S'] = '[012345]';
            $.mask.definitions['s'] = '[0123456789]';
            $("#TiempoEnLlamado").mask("Hn:Nn:Ss");
            $("#TiempoPostLlamado").mask("Hn:Nn:Ss");
            $("#Hora").mask("Hn:Nn");
        });

        function valida(valor) {
            //que no existan elementos sin escribir
            if (valor.indexOf("_") == -1) {
                var hora = valor.split(":")[0];
                if (parseInt(hora) > 23) {
                    $("#Hora").val("");
                    $("#TiempoEnLlamado").val("");
                    $("#TiempoPostLlamado").val("");
                }
            }
        }

    $('.datepicker').datepicker({
        format: 'dd/mm/yyyy',
        autoclose: true,
        language: 'es'
    });

    $('#nombre')
    .autocomplete({
        source: '@Url.Action("Lista", "Clientes")',minLength:3,
        select: function (event, ui) {
            $('#ClienteId').val(ui.item.id);
            $('#nombre').val(ui.item.value);
            return false;}
            });


        document.getElementById("TiempoPostLlamado").value = "00:00:00";
        $("#Activo").val('0');

        $(document).ready(function () {
            $("#EtiquetaId").attr('disabled', 'disabled');
            $("#EstadoId").on("change", function () {
                var valor = $("#EstadoId").val();
                if (valor === "2" || valor === true) {
                    $("#EtiquetaId").attr('disabled', false);
                } else if (valor === "1" || valor === false) {
                    // deshabilitamos
                    $("#EtiquetaId").attr('disabled', true);
                }
            });
        });

     init();

    function init() {

        document.getElementById('iniciarS').addEventListener('click', cronometrar);
        document.getElementById('grabar').addEventListener('click', parar);
        document.getElementById('resetear').addEventListener('click', reiniciar);

        h = 0;
        m = 0;
        s = 0;
        document.getElementById("TiempoEnLlamado").value = "00:00:00";
    }
    function cronometrar() {
        escribir();
        id = setInterval(escribir, 1000);
    }
    function escribir() {
        var hAux, mAux, sAux;
        s++;
        if (s > 59) { m++; s = 0; }
        if (m > 59) { h++; m = 0; }
        if (h > 24) { h = 0; }

        if (s < 10) { sAux = "0" + s; } else { sAux = s; }
        if (m < 10) { mAux = "0" + m; } else { mAux = m; }
        if (h < 10) { hAux = "0" + h; } else { hAux = h; }

        document.getElementById("TiempoEnLlamado").value = hAux + ":" + mAux + ":" + sAux;
    }
    function parar() {
        clearInterval(id);

    }

    function reiniciar() {
        clearInterval(id);
        document.getElementById("TiempoEnLlamado").value = "00:00:00";
        h = 0; m = 0; s = 0;
    }

    Window.call = cronometrar();

    </script>
}
