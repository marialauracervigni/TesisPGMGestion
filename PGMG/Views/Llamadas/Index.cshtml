@using PagedList.Mvc;
@model PagedList.PagedList<PGMG.Models.LlamadaViewModel>

@{
    ViewBag.Title = "Llamadas en curso";
}
<body class="w3">
    <div class="centrar">
        <h4>@ViewBag.Title</h4>
        <hr />
        <div class="row">
            <div class="col-sm-8">
                <a class="btn btn-default" href="/Llamadas/Create" target="_blank">Nueva llamada</a>
                <a class="btn btn-default" href="/LlamadasSolicitadas/Create" target="_blank">Solicitar llamada</a>
                <a class="btn btn-default" href="/LlamadasSolicitadas" target="_blank">Ver llamadas solicitadas</a>
                <a class="btn btn-default" href="/Llamadas/Index2" target="_blank">Llamadas del día</a>
                <a class="btn btn-default" href="/Llamadas/BuscarLlamadas" target="_blank">Llamadas por cliente</a>
            </div>
            <div class="col-sm-4">
                <input id="buscar" type="text" class="login" placeholder="Escriba algo para filtrar" />
            </div>
        </div>
        <hr />
        <br />

        <div class="rwd" id="recargar">
            <table id="tablallamadas" class="table table-striped">
                <thead>
                    <tr>
                        <th style="text-align: center" onclick="sortTable(0)">Fecha y hora</th>
                        <th style="text-align: center" onclick="sortTable(1)">Usuario</th>
                        <th style="text-align: center" onclick="sortTable(2)">Nombre cliente</th>
                        <th style="text-align: center" onclick="sortTable(3)">Nombre empleado</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model)
                    {
                        <tr>
                            <td>
                                @item.Fecha.ToShortDateString() @item.Hora.ToShortTimeString()
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.Usuario)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.NombreC)
                            </td>
                            <td>
                                @Html.DisplayFor(modelItem => item.NombreE)
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <br />
            Página @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber) de @Model.PageCount
            <br />
            Total llamadas en curso @Model.TotalItemCount

            @Html.PagedListPager(Model, page => Url.Action("Index", "Llamadas",
           new { page, pageSize = ViewBag.PageSize}))
        </div>

    </div>
</body>


@section Scripts{
    <script>
        //$(document).ready(function () {
        //    $('#actualizar').on('click', function () {
        //        window.location.reload($('#recargar'));
        //    });
        //});

        //function actualizar() { location.reload(true); }
        ////Función para actualizar cada 5 segundos
        //setInterval("actualizar()", 5000);

        var textbuscar = document.getElementById("buscar");
        textbuscar.onkeyup = function () {
            buscar(this);
        }
        function buscar(inputbuscar) {
            var valorabuscar = (inputbuscar.value).toLowerCase().trim();
            var tabla_tr = document.getElementById("tablallamadas").getElementsByTagName("tbody")[0].rows;
            for (var i = 0; i < tabla_tr.length; i++) {
                var tr = tabla_tr[i];
                var textotr = (tr.innerText).toLowerCase();
                tr.className = (textotr.indexOf(valorabuscar) >= 0) ? "mostrar" : "ocultar";
            }
        }

        function sortTable(n) {
            var table, rows, switching, i, x, y, shouldSwitch, dir, switchcount = 0;
            table = document.getElementById("tablallamadas");
            switching = true;
            dir = "asc";
            while (switching) {
                switching = false;
                rows = table.rows;
                for (i = 1; i < (rows.length - 1); i++) {
                    shouldSwitch = false;
                    x = rows[i].getElementsByTagName("TD")[n];
                    y = rows[i + 1].getElementsByTagName("TD")[n];
                    if (dir == "asc") {
                        if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {
                            shouldSwitch = true;
                            break;
                        }
                    } else if (dir == "desc") {
                        if (x.innerHTML.toLowerCase() < y.innerHTML.toLowerCase()) {
                            shouldSwitch = true;
                            break;
                        }
                    }
                }
                if (shouldSwitch) {
                    rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);
                    switching = true;
                    switchcount++;
                } else {
                    if (switchcount == 0 && dir == "asc") {
                        dir = "desc";
                        switching = true;
                    }
                }
            }
        }

    </script>
}


